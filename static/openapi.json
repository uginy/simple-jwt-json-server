{
  "openapi": "3.0.0",
  "info": {
    "title": "SV API",
    "description": "API to perform SharpVision operations",
    "contact": {
      "email": "support@adasky.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "3.9.4"
  },
  "servers": [
    {
      "url": "/api",
      "description": "Server for camera 1"
    },
    {
      "url": "/api2",
      "description": "Server for camera 2"
    }
  ],
  "tags": [
    {
      "name": "admins",
      "description": "Secured Admin-only calls"
    },
    {
      "name": "main",
      "description": "Operations related to the main screen"
    },
    {
      "name": "geometric_calibration",
      "description": "Operations for extrinsic calibration and ROI"
    },
    {
      "name": "preview",
      "description": "Operations related to the preview window"
    },
    {
      "name": "record",
      "description": "Operations for recording to external disk"
    },
    {
      "name": "v2i",
      "description": "Configuration related to ethernet communication streaming"
    },
    {
      "name": "system",
      "description": "Configuration related to system configurations"
    },
    {
      "name": "smart_shutter",
      "description": "Operations related to the shutter"
    },
    {
      "name": "static_shutter",
      "description": "Operations related to the static shutter"
    },
    {
      "name": "inner_com",
      "description": "Operations related to FIR Function Block to System Management Function Block"
    }
  ],
  "paths": {
    "/system/sw_upgrade": {
      "post": {
        "tags": [
          "system",
          "inner_com"
        ],
        "summary": "SW upgrade",
        "description": "upgrade server software (Nox + file system)",
        "operationId": "sw_upgrade",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/system_sw_upgrade_body"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.system_controller"
      }
    },
    "/system/settings": {
      "get": {
        "tags": [
          "system",
          "inner_com"
        ],
        "summary": "system settings",
        "description": "get system settings",
        "operationId": "get_system_settings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemSettings"
                }
              }
            }
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.system_controller"
      },
      "post": {
        "tags": [
          "system",
          "inner_com"
        ],
        "summary": "system settings",
        "description": "set system settings",
        "operationId": "set_system_settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/system_settings_body"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.system_controller"
      }
    },
    "/static_shutter/settings": {
      "get": {
        "tags": [
          "static_shutter",
          "inner_com"
        ],
        "summary": "static shutter settings",
        "description": "get static shutter",
        "operationId": "get_static_shutter",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticShutter"
                }
              }
            }
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.static_shutter_controller"
      },
      "post": {
        "tags": [
          "static_shutter",
          "inner_com"
        ],
        "summary": "static shutter settings",
        "description": "set static shutter",
        "operationId": "set_static_shutter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticShutter"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.static_shutter_controller"
      }
    },
    "/smart_shutter/manual": {
      "post": {
        "tags": [
          "smart_shutter",
          "inner_com"
        ],
        "summary": "manual smart shutter",
        "description": "perform manual smart_shutter",
        "operationId": "manual_smart_shutter",
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.smart_shutter_controller"
      }
    },
    "/smart_shutter/settings": {
      "get": {
        "tags": [
          "smart_shutter",
          "inner_com"
        ],
        "summary": "smart shutter settings",
        "description": "get smart_shutter",
        "operationId": "get_smart_shutter",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartShutter"
                }
              }
            }
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.smart_shutter_controller"
      },
      "post": {
        "tags": [
          "smart_shutter",
          "inner_com"
        ],
        "summary": "smart shutter settings",
        "description": "set smart_shutter",
        "operationId": "set_smart_shutter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmartShutter"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.smart_shutter_controller"
      }
    },
    "/geometric_calibration/set_point_type": {
      "post": {
        "tags": [
          "geometric_calibration"
        ],
        "summary": "Set point type",
        "description": "Set one of \"Distance\", \"Direction\", \"ROI\"",
        "operationId": "set_point_type",
        "requestBody": {
          "content": {
            "application/text": {
              "schema": {
                "$ref": "#/components/schemas/PointType"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.geometric_calibration_controller"
      }
    },
    "/geometric_calibration/marking": {
      "post": {
        "tags": [
          "geometric_calibration"
        ],
        "summary": "Marking points",
        "description": "Start/Stop/Clear/Copy/Compute point marking",
        "operationId": "marking",
        "requestBody": {
          "content": {
            "application/text": {
              "schema": {
                "$ref": "#/components/schemas/Marking"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.geometric_calibration_controller"
      }
    },
    "/geometric_calibration/point_location": {
      "get": {
        "tags": [
          "geometric_calibration"
        ],
        "summary": "Get point world position",
        "description": "Upon height, width coordinates of a point return world position",
        "operationId": "get_point_location",
        "parameters": [
          {
            "name": "width",
            "in": "query",
            "description": "Width of point in preview",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height of point in preview",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "World Position",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Point"
                }
              }
            }
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.geometric_calibration_controller"
      },
      "post": {
        "tags": [
          "geometric_calibration"
        ],
        "summary": "Set point location",
        "description": "Set height, width coordinates of a point after choosing type",
        "operationId": "set_point_location",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointLocation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.geometric_calibration_controller"
      }
    },
    "/geometric_calibration/state": {
      "get": {
        "tags": [
          "geometric_calibration"
        ],
        "summary": "Get current state",
        "description": "Full state of geometric calibration incl. points array",
        "operationId": "get_geometric_calibration_state",
        "responses": {
          "200": {
            "description": "State",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeometricCalibrationState"
                }
              }
            }
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.geometric_calibration_controller"
      }
    },
    "/record/profile": {
      "get": {
        "tags": [
          "record",
          "inner_com"
        ],
        "summary": "Get recording profile",
        "description": "Get recording profile and parameters",
        "operationId": "get_recording_profile",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingProfile"
                }
              }
            }
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.record_controller"
      },
      "post": {
        "tags": [
          "record",
          "inner_com"
        ],
        "summary": "set a recording profile",
        "description": "set one of the recording profiles - All, Production, Minimal. This command should not be used during recording",
        "operationId": "set_recording_profile",
        "requestBody": {
          "content": {
            "application/text": {
              "schema": {
                "$ref": "#/components/schemas/RecordingMode"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "profile was set"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.record_controller"
      }
    },
    "/record/state": {
      "get": {
        "tags": [
          "record",
          "inner_com"
        ],
        "summary": "Get recording state",
        "description": "Get recording state parameters",
        "operationId": "get_recording_state",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingState"
                }
              }
            }
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.record_controller"
      },
      "post": {
        "tags": [
          "record",
          "inner_com"
        ],
        "summary": "start or stop recording",
        "description": "start or stop recording based on current system status. Note that only `is_recording` field is relevant in this version.",
        "operationId": "set_recording_state",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordingState"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "success"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.record_controller"
      }
    },
    "/system/status": {
      "summary": "System status",
      "description": "Returns system status object",
      "get": {
        "tags": [
          "system",
          "inner_com"
        ],
        "summary": "Get system status",
        "description": "Get system status",
        "operationId": "get_system_status",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.system_controller"
      },
      "post": {
        "tags": [
          "system",
          "inner_com"
        ],
        "summary": "set a response in case GET status returned InteractiveMsgBox",
        "description": "set one of the return values from InteractiveMsgBox",
        "operationId": "set_interactive_msg_box",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "return value",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "response was set"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.system_controller"
      }
    },
    "/system/detailed_logs": {
      "get": {
        "tags": [
          "system",
          "inner_com"
        ],
        "summary": "Get detailed logs",
        "description": "Returns a .7z file to be sent to Adasky",
        "operationId": "get_detailed_logs",
        "responses": {
          "102": {
            "description": "The log .7z file is not ready yet"
          },
          "200": {
            "description": "A .7z file"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.system_controller"
      },
      "post": {
        "tags": [
          "system",
          "inner_com"
        ],
        "summary": "Generate detailed logs",
        "description": "Only generate the log files to be downloaded later",
        "operationId": "generate_detailed_logs",
        "responses": {
          "201": {
            "description": "response was set"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.system_controller"
      }
    },
    "/main/components": {
      "get": {
        "tags": [
          "main",
          "inner_com"
        ],
        "summary": "Get available components",
        "description": "Returns a list of all visible components",
        "operationId": "get_components",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Components"
                  },
                  "x-content-type": "application/json"
                }
              }
            }
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.main_controller"
      }
    },
    "/main/about": {
      "get": {
        "tags": [
          "main",
          "inner_com"
        ],
        "summary": "Get version",
        "description": "Returns a string per versioned item",
        "operationId": "get_about",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/About"
                }
              }
            }
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.main_controller"
      }
    },
    "/main/userconfig": {
      "post": {
        "tags": [
          "main",
          "inner_com"
        ],
        "summary": "Update user config",
        "description": "Update user json configuration. This command takes effect only after application restart.",
        "operationId": "update_user_config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.main_controller"
      }
    },
    "/main/userconfig/{extension}": {
      "get": {
        "tags": [
          "main",
          "inner_com"
        ],
        "summary": "Get user config",
        "description": "Returns user json configuration",
        "operationId": "get_user_config",
        "parameters": [
          {
            "name": "extension",
            "in": "path",
            "description": "Extension config for get config",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "x-content-type": "application/json"
                }
              }
            }
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.main_controller"
      },
      "delete": {
        "tags": [
          "main",
          "inner_com"
        ],
        "summary": "Remove user config",
        "description": "Remove user json configuration. This command takes effect only after application restart.",
        "operationId": "remove_user_config",
        "parameters": [
          {
            "name": "extension",
            "in": "path",
            "description": "Extension config to delete. Use '*' for all extensions (a.k.a factory reset)",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.main_controller"
      }
    },
    "/preview/hotkeys": {
      "post": {
        "tags": [
          "preview"
        ],
        "summary": "Various operations to control the provided preview stream",
        "description": "Shift+H                       Show this screen\n\nShift+F                       Vertical Flip\n\nShift+C                       Draw cross\n\nShift+A                       Zoom/Pan reset\n\nShift+Z, Shift+Ctrl+Z         Zoom In/Out\n\nMouse Wheel                   Zoom In/Out\n\nArrows                        Pan right/left/up/down\n\nShift+R                       Draw ROI\n\nShift+D                       Draw Date & Time\n\nShift+W                       World Position\n\nShift+X                       Draw X=0 Line\n\nBounding Box (bb) controls:\n\n1                             display bb only\n\n2                             display bb coordinates\n\n3                             display bb width-height\n\n4                             display image-related bb info\n\n5                             display position-related bb info (if applicable)\n\nShift+L, Shift+Ctrl+L         BB width wider/thinner\n",
        "operationId": "hotkeys",
        "requestBody": {
          "content": {
            "application/text": {
              "schema": {
                "$ref": "#/components/schemas/Hotkeys"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "key was set"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.preview_controller"
      }
    },
    "/v2i/settings": {
      "get": {
        "tags": [
          "v2i",
          "inner_com"
        ],
        "summary": "get v2i settings",
        "description": "get detinations parameters + enable/disable",
        "operationId": "get_v2i_settings",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2iSettings"
                }
              }
            }
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.v2i_controller"
      },
      "post": {
        "tags": [
          "v2i",
          "inner_com"
        ],
        "summary": "set v2i settings",
        "description": "set detinations parameters + enable/disable",
        "operationId": "set_v2i_settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V2iSettings"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "profile was set"
          },
          "400": {
            "description": "invalid"
          }
        },
        "x-openapi-router-controller": "swagger_server.controllers.v2i_controller"
      }
    }
  },
  "components": {
    "schemas": {
      "Status": {
        "type": "object",
        "properties": {
          "UpTime": {
            "type": "integer",
            "format": "int64"
          },
          "RecordingTime": {
            "type": "integer",
            "format": "int64"
          },
          "FPS": {
            "type": "string"
          },
          "msg": {
            "$ref": "#/components/schemas/InteractiveMsgBox"
          }
        },
        "example": {
          "msg": {
            "msg": "msg",
            "severity": "severity",
            "response": [
              "response",
              "response"
            ]
          },
          "RecordingTime": 6,
          "UpTime": 0,
          "FPS": "FPS"
        }
      },
      "InteractiveMsgBox": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "response": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": {
          "msg": "msg",
          "severity": "severity",
          "response": [
            "response",
            "response"
          ]
        }
      },
      "Point": {
        "type": "object",
        "properties": {
          "width": {
            "maximum": 639,
            "minimum": 0,
            "type": "integer",
            "description": "0 is left 639 is right",
            "format": "uint16"
          },
          "height": {
            "maximum": 479,
            "minimum": 0,
            "type": "integer",
            "description": "0 is down 479 is up",
            "format": "uint16"
          }
        },
        "example": {
          "width": 300,
          "height": 200
        }
      },
      "PointLocation": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "default": ""
          },
          "distance": {
            "type": "number",
            "default": 0
          },
          "comment": {
            "type": "string",
            "default": ""
          },
          "color": {
            "type": "string",
            "default": ""
          }
        },
        "example": {
          "distance": 1.4658129805029452,
          "color": "color",
          "width": 0,
          "name": "name",
          "comment": "comment",
          "height": 6
        }
      },
      "PointType": {
        "type": "string",
        "example": "Distance",
        "enum": [
          "Distance",
          "Direction",
          "ROI"
        ]
      },
      "RecordingMode": {
        "type": "string",
        "example": "Production",
        "enum": [
          "All",
          "Production",
          "Minimal"
        ]
      },
      "RecordingState": {
        "type": "object",
        "properties": {
          "recording_path": {
            "type": "string",
            "default": ""
          },
          "time_left": {
            "type": "string",
            "default": ""
          },
          "free_memory": {
            "type": "string",
            "default": ""
          },
          "fps": {
            "type": "string",
            "default": "30"
          },
          "is_recording": {
            "type": "boolean"
          }
        },
        "example": {
          "time_left": "time_left",
          "free_memory": "free_memory",
          "fps": "30",
          "is_recording": true,
          "recording_path": "recording_path"
        }
      },
      "RecordingProfile": {
        "type": "object",
        "properties": {
          "config_name": {
            "type": "string"
          },
          "config_desc": {
            "type": "string"
          },
          "extensions": {
            "$ref": "#/components/schemas/RecordingProfile_extensions"
          },
          "watchdog": {
            "$ref": "#/components/schemas/RecordingProfile_watchdog"
          }
        },
        "example": {
          "config_name": "config_name",
          "extensions": {
            "capture_stream": {
              "preview_frame_format": "PNG",
              "depth": "14bit + 8bit",
              "raw_fps": 30,
              "format": "TAR",
              "stop_on_fail": true,
              "preview_fps": 30,
              "csv_headers": "index,x,y,w,h,rank,classid,track_id,range,position_x,position_y,position_z,trajectory_x,trajectory_y,trajectory_z,speed,cal_conf",
              "raw_frame_format": "RAW",
              "enabled": true
            },
            "preview": true,
            "camera_control": true,
            "geometric_calibration": true,
            "monitor": true,
            "v2i": true,
            "detector": true,
            "smart_shutter": true
          },
          "watchdog": {
            "min_minutes_to_save": 5,
            "notify_user": 5,
            "min_scene_num": 2,
            "watchtime": 0,
            "disk_space_warn_mb": 6,
            "disk_space_abort_mb": 1,
            "min_nox_exp": 7
          },
          "config_desc": "config_desc"
        }
      },
      "StaticShutter": {
        "type": "object",
        "properties": {
          "toggle": {
            "type": "boolean",
            "description": "Toggle is Static Shutter On/Off",
            "default": false
          }
        },
        "example": {
          "toggle": true
        }
      },
      "SmartShutter": {
        "type": "object",
        "properties": {
          "shutterMode": {
            "type": "string",
            "enum": [
              "obstruction",
              "periodic",
              "both"
            ],
            "default": "both"
          },
          "autoHeater": {
            "type": "boolean",
            "default": true
          },
          "selfTestOnBoot": {
            "type": "boolean",
            "default": true
          }
        },
        "example": {
          "shutterMode": "both",
          "autoHeater": true,
          "selfTestOnBoot": true
        }
      },
      "Marking": {
        "type": "string",
        "example": "Clear",
        "enum": [
          "Start",
          "Stop",
          "Clear",
          "Copy",
          "Compute"
        ]
      },
      "SystemCommandParam": {
        "type": "string",
        "description": "Parameters for needed comands",
        "example": "Camera number 1 or 2",
        "default": ""
      },
      "SystemCommand": {
        "type": "string",
        "enum": [
          "RestartApp",
          "Reboot",
          "Shutdown",
          "SetDate",
          "SetTimezone",
          "ToggleNTP",
          "SetNTP",
          "SetNvpmodel",
          "SetNetwork"
        ]
      },
      "Components": {
        "type": "string",
        "enum": [
          "geometric_calibration",
          "recorder",
          "v2i",
          "system",
          "smart_shutter",
          "image_quality",
          "analytics"
        ]
      },
      "SystemSettings": {
        "type": "object",
        "properties": {
          "dhcp_timeout": {
            "type": "integer",
            "default": 10
          },
          "fallback_ip": {
            "type": "string",
            "default": "192.168.1.5"
          },
          "fallback_netmask": {
            "type": "integer",
            "default": 24
          },
          "fallback_gw": {
            "type": "string",
            "default": "192.168.1.2"
          },
          "date_time": {
            "type": "string",
            "default": ""
          },
          "timezone": {
            "type": "string",
            "default": ""
          },
          "ntp_enabled": {
            "type": "boolean",
            "default": true
          },
          "ntp_conf": {
            "type": "string",
            "default": ""
          },
          "nvpmodel": {
            "type": "integer",
            "default": 3
          }
        },
        "example": {
          "dhcp_timeout": 0,
          "nvpmodel": 1,
          "fallback_netmask": 6,
          "fallback_gw": "192.168.1.2",
          "date_time": "date_time",
          "ntp_conf": "ntp_conf",
          "timezone": "timezone",
          "fallback_ip": "192.168.1.5"
        }
      },
      "Hotkeys": {
        "type": "string",
        "enum": [
          "C",
          "x",
          "R",
          "D",
          "1",
          "2",
          "3",
          "4",
          "5",
          "L",
          "Shift+L"
        ]
      },
      "About": {
        "type": "object",
        "properties": {
          "Nox": {
            "type": "string"
          },
          "Viper": {
            "type": "string"
          },
          "Platform": {
            "type": "string"
          },
          "SDK": {
            "type": "string"
          },
          "CameraId": {
            "type": "string"
          }
        },
        "example": {
          "Nox": "Nox",
          "Viper": "Viper",
          "Platform": "Platform",
          "SDK": "SDK",
          "CameraId": "CameraId"
        }
      },
      "Destination": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "uint16"
          },
          "enable": {
            "type": "boolean"
          }
        },
        "example": {
          "port": 0,
          "enable": true,
          "ip": "ip",
          "name": "name"
        }
      },
      "V2iSettings": {
        "type": "object",
        "properties": {
          "myself": {
            "$ref": "#/components/schemas/Destination"
          },
          "video": {
            "$ref": "#/components/schemas/Destination"
          },
          "detect": {
            "$ref": "#/components/schemas/Destination"
          }
        },
        "example": {
          "myself": {
            "port": 0,
            "enable": true,
            "ip": "ip",
            "name": "name"
          }
        }
      },
      "GeometricCalibrationState": {
        "type": "object",
        "properties": {
          "camera_id": {
            "type": "string"
          },
          "point_type": {
            "$ref": "#/components/schemas/PointType"
          },
          "points": {
            "maxItems": 10,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PointLocation"
            }
          },
          "intrinsic_file": {
            "type": "string"
          },
          "distance_csv_file": {
            "type": "string"
          },
          "direction_points": {
            "type": "string"
          },
          "roi_points": {
            "type": "string"
          },
          "extrinsic_output": {
            "type": "string"
          },
          "marking": {
            "type": "boolean"
          },
          "auto_calib": {
            "type": "boolean"
          },
          "non_flat_surface": {
            "type": "boolean"
          }
        },
        "example": {
          "point_type": "Distance",
          "marking": true,
          "auto_calib": false,
          "non_flat_surface": false,
          "intrinsic_file": "intrinsic_file",
          "camera_id": "camera_id",
          "direction_points": "direction_points",
          "extrinsic_output": "extrinsic_output",
          "roi_points": "roi_points",
          "points": [
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            },
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            },
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            },
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            },
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            },
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            },
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            },
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            },
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            },
            {
              "distance": 1.4658129805029452,
              "color": "color",
              "width": 0,
              "name": "name",
              "comment": "comment",
              "height": 6
            }
          ],
          "distance_csv_file": "distance_csv_file"
        }
      },
      "UpdateUserConfig": {
        "type": "object",
        "properties": {
          "config": {
            "type": "object"
          },
          "extension": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "example": {
          "extension": "extension",
          "password": "password",
          "config": {}
        }
      },
      "system_sw_upgrade_body": {
        "required": [
          "fwpackage"
        ],
        "type": "object",
        "properties": {
          "fwpackage": {
            "type": "string",
            "description": "Firmware package to be uploaded to the server",
            "format": "binary"
          }
        },
        "additionalProperties": false
      },
      "system_settings_body": {
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/SystemSettings"
          },
          "command": {
            "$ref": "#/components/schemas/SystemCommand"
          },
          "parameter": {
            "$ref": "#/components/schemas/SystemCommandParam"
          }
        }
      },
      "RecordingProfile_extensions_capture_stream": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "depth": {
            "type": "string",
            "example": "14bit + 8bit"
          },
          "format": {
            "type": "string",
            "example": "TAR"
          },
          "raw_frame_format": {
            "type": "string",
            "example": "RAW"
          },
          "preview_frame_format": {
            "type": "string",
            "example": "PNG"
          },
          "raw_fps": {
            "type": "integer",
            "example": 30
          },
          "preview_fps": {
            "type": "integer",
            "example": 30
          },
          "stop_on_fail": {
            "type": "boolean"
          },
          "csv_headers": {
            "type": "string",
            "example": "index,x,y,w,h,rank,classid,track_id,range,position_x,position_y,position_z,trajectory_x,trajectory_y,trajectory_z,speed,cal_conf"
          }
        },
        "example": {
          "preview_frame_format": "PNG",
          "depth": "14bit + 8bit",
          "raw_fps": 30,
          "format": "TAR",
          "stop_on_fail": true,
          "preview_fps": 30,
          "csv_headers": "index,x,y,w,h,rank,classid,track_id,range,position_x,position_y,position_z,trajectory_x,trajectory_y,trajectory_z,speed,cal_conf",
          "raw_frame_format": "RAW",
          "enabled": true
        }
      },
      "RecordingProfile_extensions": {
        "type": "object",
        "properties": {
          "camera_control": {
            "type": "boolean"
          },
          "detector": {
            "type": "boolean"
          },
          "capture_stream": {
            "$ref": "#/components/schemas/RecordingProfile_extensions_capture_stream"
          },
          "preview": {
            "type": "boolean"
          },
          "smart_shutter": {
            "type": "boolean"
          },
          "monitor": {
            "type": "boolean"
          },
          "v2i": {
            "type": "boolean"
          },
          "geometric_calibration": {
            "type": "boolean"
          }
        },
        "example": {
          "capture_stream": {
            "preview_frame_format": "PNG",
            "depth": "14bit + 8bit",
            "raw_fps": 30,
            "format": "TAR",
            "stop_on_fail": true,
            "preview_fps": 30,
            "csv_headers": "index,x,y,w,h,rank,classid,track_id,range,position_x,position_y,position_z,trajectory_x,trajectory_y,trajectory_z,speed,cal_conf",
            "raw_frame_format": "RAW",
            "enabled": true
          },
          "preview": true,
          "camera_control": true,
          "geometric_calibration": true,
          "monitor": true,
          "v2i": true,
          "detector": true,
          "smart_shutter": true
        }
      },
      "RecordingProfile_watchdog": {
        "type": "object",
        "properties": {
          "watchtime": {
            "type": "integer"
          },
          "disk_space_warn_mb": {
            "type": "integer"
          },
          "disk_space_abort_mb": {
            "type": "integer"
          },
          "notify_user": {
            "type": "integer"
          },
          "min_minutes_to_save": {
            "type": "integer"
          },
          "min_scene_num": {
            "type": "integer"
          },
          "min_nox_exp": {
            "type": "integer"
          }
        },
        "example": {
          "min_minutes_to_save": 5,
          "notify_user": 5,
          "min_scene_num": 2,
          "watchtime": 0,
          "disk_space_warn_mb": 6,
          "disk_space_abort_mb": 1,
          "min_nox_exp": 7
        }
      }
    }
  }
}